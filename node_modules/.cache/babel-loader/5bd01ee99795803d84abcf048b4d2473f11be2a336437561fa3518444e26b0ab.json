{"ast":null,"code":"var _jsxFileName = \"/Users/lina/Documents/SEI2023/_projects/project2_climb/src/components/pages/MapPage.js\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faLocation } from \"@fortawesome/free-solid-svg-icons\";\n// import \"./Map.css\";\n// import {\n//   useJsApiLoader,\n//   GoogleMap,\n//   Marker,\n//   Autocomplete,\n//   DirectionsRenderer,\n// } from \"@react-google-maps/api\";\n// import { useRef, useState, useEffect } from \"react\";\n\n// const center = { lat: 48.8584, lng: 2.2945 };\n\n// function Map() {\n//   const { isLoaded } = useJsApiLoader({\n//     googleMapsApiKey: \"AIzaSyBBxKEMeIVp6Y0S-xTnlpk68aIL2ksDSs0\",\n//     // googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n//     libraries: [\"places\"],\n//   });\n\n//   const [map, setMap] = useState(/** @type google.maps.Map */ (null));\n//   const [directionsResponse, setDirectionsResponse] = useState(null);\n//   const [distance, setDistance] = useState(\"\");\n//   const [duration, setDuration] = useState(\"\");\n\n//   /** @type React.MutableRefObject<HTMLInputElement> */\n//   const originRef = useRef();\n//   /** @type React.MutableRefObject<HTMLInputElement> */\n//   const destinationRef = useRef();\n\n//   const [latitude, setLatitude] = useState(\"\");\n//   const [longtitude, setLongtitude] = useState(\"\");\n\n//   useEffect(() => {\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       setLatitude(position.coords.latitude);\n//       setLongtitude(position.coords.longitude);\n//       console.log(latitude, longtitude);\n//     });\n//   }, [latitude, longtitude]);\n\n//   let currentLocation = `lat=${latitude}&lon=${longtitude}`;\n//   console.log(currentLocation);\n\n//   if (!isLoaded) {\n//     if (!isLoaded) return <div>Loading still...</div>;\n//   }\n\n//   async function calculateRoute() {\n//     if (originRef.current.value === \"\" || destinationRef.current.value === \"\") {\n//       return;\n//     }\n//     // eslint-disable-next-line no-undef\n//     const directionsService = new google.maps.DirectionsService();\n//     const results = await directionsService.route({\n//       origin: originRef.current.value,\n//       destination: destinationRef.current.value,\n//       // eslint-disable-next-line no-undef\n//       travelMode: google.maps.TravelMode.DRIVING,\n//     });\n//     setDirectionsResponse(results);\n//     setDistance(results.routes[0].legs[0].distance.text);\n//     setDuration(results.routes[0].legs[0].duration.text);\n//   }\n\n//   function clearRoute() {\n//     setDirectionsResponse(null);\n//     setDistance(\"\");\n//     setDuration(\"\");\n//     originRef.current.value = \"\";\n//     destinationRef.current.value = \"\";\n//   }\n\n//   return (\n//     <>\n//       <div className=\"map-container\">\n//         <GoogleMap\n//           center={center}\n//           zoom={15}\n//           mapContainerStyle={{ width: \"100%\", height: \"100%\" }}\n//           options={{\n//             zoomControl: false,\n//             streetViewControl: false,\n//             mapTypeControl: false,\n//             fullscreenControl: false,\n//           }}\n//           onLoad={(map) => setMap(map)}\n//         >\n//           <Marker position={currentLocation} />\n//           {directionsResponse && (\n//             <DirectionsRenderer directions={directionsResponse} />\n//           )}\n//         </GoogleMap>\n//       </div>\n\n//       <div className=\"direction-box\">\n//         <div className=\"input-text\">\n//           <Autocomplete>\n//             <input type=\"text\" placeholder=\"Origin\" ref={originRef} />\n//           </Autocomplete>\n\n//           <Autocomplete>\n//             <input type=\"text\" placeholder=\"Destination\" ref={destinationRef} />\n//           </Autocomplete>\n//         </div>\n//         <div className=\"direction-box-lower\">\n//           <div className=\"button-group\">\n//             <button className=\"button\" type=\"submit\" onClick={calculateRoute}>\n//               Calculate Route\n//             </button>\n//             <button className=\"button\" type=\"submit\" onClick={clearRoute}>\n//               Clear Route\n//             </button>\n//             <FontAwesomeIcon\n//               icon={faLocation}\n//               onClick={() => {\n//                 map.panTo({ lat: latitude, lng: longtitude });\n//                 map.setZoom(15);\n//               }}\n//             />\n//           </div>\n\n//           <div className=\"results-group\">\n//             <p>Distance: {distance}</p>\n//             <p>Duration: {duration}</p>\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default Map;\n\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Maps = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Mapss is working\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn\",\n      children: \"Home\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = Maps;\nexport default Maps;\nvar _c;\n$RefreshReg$(_c, \"Maps\");","map":{"version":3,"names":["Link","jsxDEV","_jsxDEV","Fragment","_Fragment","Maps","children","fileName","_jsxFileName","lineNumber","columnNumber","to","className","_c","$RefreshReg$"],"sources":["/Users/lina/Documents/SEI2023/_projects/project2_climb/src/components/pages/MapPage.js"],"sourcesContent":["// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faLocation } from \"@fortawesome/free-solid-svg-icons\";\n// import \"./Map.css\";\n// import {\n//   useJsApiLoader,\n//   GoogleMap,\n//   Marker,\n//   Autocomplete,\n//   DirectionsRenderer,\n// } from \"@react-google-maps/api\";\n// import { useRef, useState, useEffect } from \"react\";\n\n// const center = { lat: 48.8584, lng: 2.2945 };\n\n// function Map() {\n//   const { isLoaded } = useJsApiLoader({\n//     googleMapsApiKey: \"AIzaSyBBxKEMeIVp6Y0S-xTnlpk68aIL2ksDSs0\",\n//     // googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n//     libraries: [\"places\"],\n//   });\n\n//   const [map, setMap] = useState(/** @type google.maps.Map */ (null));\n//   const [directionsResponse, setDirectionsResponse] = useState(null);\n//   const [distance, setDistance] = useState(\"\");\n//   const [duration, setDuration] = useState(\"\");\n\n//   /** @type React.MutableRefObject<HTMLInputElement> */\n//   const originRef = useRef();\n//   /** @type React.MutableRefObject<HTMLInputElement> */\n//   const destinationRef = useRef();\n\n//   const [latitude, setLatitude] = useState(\"\");\n//   const [longtitude, setLongtitude] = useState(\"\");\n\n//   useEffect(() => {\n//     navigator.geolocation.getCurrentPosition((position) => {\n//       setLatitude(position.coords.latitude);\n//       setLongtitude(position.coords.longitude);\n//       console.log(latitude, longtitude);\n//     });\n//   }, [latitude, longtitude]);\n\n//   let currentLocation = `lat=${latitude}&lon=${longtitude}`;\n//   console.log(currentLocation);\n\n//   if (!isLoaded) {\n//     if (!isLoaded) return <div>Loading still...</div>;\n//   }\n\n//   async function calculateRoute() {\n//     if (originRef.current.value === \"\" || destinationRef.current.value === \"\") {\n//       return;\n//     }\n//     // eslint-disable-next-line no-undef\n//     const directionsService = new google.maps.DirectionsService();\n//     const results = await directionsService.route({\n//       origin: originRef.current.value,\n//       destination: destinationRef.current.value,\n//       // eslint-disable-next-line no-undef\n//       travelMode: google.maps.TravelMode.DRIVING,\n//     });\n//     setDirectionsResponse(results);\n//     setDistance(results.routes[0].legs[0].distance.text);\n//     setDuration(results.routes[0].legs[0].duration.text);\n//   }\n\n//   function clearRoute() {\n//     setDirectionsResponse(null);\n//     setDistance(\"\");\n//     setDuration(\"\");\n//     originRef.current.value = \"\";\n//     destinationRef.current.value = \"\";\n//   }\n\n//   return (\n//     <>\n//       <div className=\"map-container\">\n//         <GoogleMap\n//           center={center}\n//           zoom={15}\n//           mapContainerStyle={{ width: \"100%\", height: \"100%\" }}\n//           options={{\n//             zoomControl: false,\n//             streetViewControl: false,\n//             mapTypeControl: false,\n//             fullscreenControl: false,\n//           }}\n//           onLoad={(map) => setMap(map)}\n//         >\n//           <Marker position={currentLocation} />\n//           {directionsResponse && (\n//             <DirectionsRenderer directions={directionsResponse} />\n//           )}\n//         </GoogleMap>\n//       </div>\n\n//       <div className=\"direction-box\">\n//         <div className=\"input-text\">\n//           <Autocomplete>\n//             <input type=\"text\" placeholder=\"Origin\" ref={originRef} />\n//           </Autocomplete>\n\n//           <Autocomplete>\n//             <input type=\"text\" placeholder=\"Destination\" ref={destinationRef} />\n//           </Autocomplete>\n//         </div>\n//         <div className=\"direction-box-lower\">\n//           <div className=\"button-group\">\n//             <button className=\"button\" type=\"submit\" onClick={calculateRoute}>\n//               Calculate Route\n//             </button>\n//             <button className=\"button\" type=\"submit\" onClick={clearRoute}>\n//               Clear Route\n//             </button>\n//             <FontAwesomeIcon\n//               icon={faLocation}\n//               onClick={() => {\n//                 map.panTo({ lat: latitude, lng: longtitude });\n//                 map.setZoom(15);\n//               }}\n//             />\n//           </div>\n\n//           <div className=\"results-group\">\n//             <p>Distance: {distance}</p>\n//             <p>Duration: {duration}</p>\n//           </div>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default Map;\n\nimport { Link } from \"react-router-dom\";\nconst Maps = () => {\n  return (\n    <>\n      <h1> Mapss is working</h1>\n      <Link to=\"/\" className=\"btn\">\n        Home\n      </Link>\n    </>\n  );\n};\n\nexport default Maps;\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,SAASA,IAAI,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACxC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EACjB,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACEJ,OAAA;MAAAI,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC1BR,OAAA,CAACF,IAAI;MAACW,EAAE,EAAC,GAAG;MAACC,SAAS,EAAC,KAAK;MAAAN,QAAA,EAAC;IAE7B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA,eACP,CAAC;AAEP,CAAC;AAACG,EAAA,GATIR,IAAI;AAWV,eAAeA,IAAI;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}